library(knitr)
library(knitr)
#| echo: false
#| cache: false
#| message: false
#| warning: false
## Global options
library(knitr)
opts_chunk$set(echo=TRUE,
cache=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
eval=TRUE)
#| echo: false
#| cache: false
#| message: false
#| warning: false
## Global options
library(knitr)
opts_chunk$set(echo=TRUE,
cache=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
eval=TRUE)
load("C:/Users/remia/OneDrive/Documents/COURS/S3/PST/TP/TP1/.RData")
notes <- scan("TP1_files/Notes.xlsx");
notes <- read.table("TP1_files/Notes.xlsx");
View(notes)
notes <- read.csv("TP1_files/Notes.xlsx");
notes <- read.table("TP1_files/Notes.xlsx");
View(notes)
View(notes)
notes <- read.table(file = "TP1_files/Notes.xlsx", sep = "\t", header=TRUE)
View(notes)
#| echo: false
#| cache: false
#| message: false
#| warning: false
## Global options
library(knitr)
library(xlsx)
install.packages("xlsx")
install.packages("xlsx", lib="C:/Users/remia/AppData/Local/R/cache/R/renv/sandbox/R-4.3/x86_64-w64-mingw32/bd3f13aa")
#| echo: false
#| cache: false
#| message: false
#| warning: false
## Global options
library(knitr)
library(xlsx)
opts_chunk$set(echo=TRUE,
cache=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
eval=TRUE)
notes <- read.xlsx("TP1_files/Notes.xlsx")
notes <- read.xlsx("TP1_files/Notes.xlsx",1)
examen <- readxl("Notes.xlsx")
install.packages("readxl", lib="C:/Users/remia/AppData/Local/R/cache/R/renv/sandbox/R-4.3/x86_64-w64-mingw32/bd3f13aa")
examen <- read_("Notes.xlsx")
library(readxl, lib.loc = "C:/Users/remia/AppData/Local/R/cache/R/renv/sandbox/R-4.3/x86_64-w64-mingw32/bd3f13aa")
examen <- read_excel("Notes.xlsx")
examen <- read_excel("TP1_files/Notes.xlsx")
boxplot(examen$Notes, horizontal = TRUE)
View(examen)
boxplot(examen$Note, horizontal = TRUE)
by(examen$Notes, examen$Classe, sd)
by(examen$Notes, examen$Classe, sd)
by(examen$Note, examen$Classe, sd)
examen <- read_excel("TP1_files/Notes.xlsx")
examen <- read_excel("TP1_files/Notes.xlsx")
library(readxl)
library(readxl)
library(readxl)
examen <- read_excel("TP1_files/Notes.xlsx")
by(examen$Note, examen$Classe, sd)
renv::status()
by(examen$Note, examen$Classe, sd)
renv::status()
install.packages("readxl")
library("readxl")
examen <- read_excel("TP1_files/Notes.xlsx")
examen
boxplot(examen$Note, horizontal = TRUE)
library(lattice)
data(Titanic)
Titanic
titanic.bar<-barchart(Class~Freq|Sex + Age, data=as.data.frame(Titanic),
groups=Survived, stack=TRUE, layout=c(4,1),
auto.key=list(title="Survived", columns=2))
print(titanic.bar)
library(knitr, lib.loc = "C:/Program Files/R/R-4.3.3/library")
library(rmarkdown)
library("HSAUR2")
#install.packages("readxl")
install.packages("HSAUR2")
library("readxl")
library("HSAUR2")
#install.packages("readxl")
install.packages("HSAUR2")
library("readxl")
library("HSAUR2")
install.packages("HSAUR2")
#install.packages("readxl")
install.packages("HSAUR2")
library("readxl")
library("HSAUR2")
data(HSAUR2)
HSAUR2
data("plasma")
plasma
data("plasma")
plasma
cor(plasma["fibrinogen"], plasma["globulin"])
data("plasma")
plasma
cor(plasma["fibrinogen"], plasma["globulin"])
plasma["fibrinogen"]
data("plasma")
plasma
cor(plasma["fibrinogen"], plasma["globulin"])
plasma.glm<-glm(ESR~fibrinogen+globulin, data=plasma, family=binomial)
prob<-predict(plasma.glm, type="response")
par(pty="s")
plot(globulin~fibrinogen, data=plasma, xlim=c(2,6), ylim=c(25,55), pch=20,
xlab="fibrinogène", ylab="globuline", main="")
symbols(plasma$fibrinogen, plasma$globulin, circles=prob, add=TRUE, fg="red",
bg="orange")
help("anscombe")
anscombe
anscombe.1<-data.frame(x1=anscombe$x1, x4=anscombe$x4, y1=anscombe$y1,
y2=anscombe$y2, y3=anscombe$y3, y4=anscombe$y4)
View(anscombe.1)
install.packages("corrplot")
#install.packages("corrplot")
library("corrplot")
#install.packages("corrplot")
library("corrplot")
corrplot.mixed(anscombe.1)
View(anscombe.1)
#install.packages("corrplot")
library("corrplot")
corrplot.mixed(anscombe.1)
View(anscombe.1)
#install.packages("corrplot")
library("corrplot")
corrplot.mixed(anscombe)
View(anscombe.1)
#install.packages("corrplot")
library("corrplot")
corrplot.mixed(anscombe.1)
#install.packages("corrplot")
library("corrplot")
corrplot.mixed(anscombe.1,lower = 'ellipse', upper = 'circle')
#install.packages("corrplot")
library("corrplot")
corrplot.mixed(anscombe.1,lower = 'ellipse', upper = 'circle')
#install.packages("corrplot")
library("corrplot")
corrplot.mixed(anscombe.1)
#install.packages("corrplot")
library("corrplot")
corrplot.mixed(cor(anscombe.1)
#install.packages("readxl")
#install.packages("HSAUR2")
library("readxl")
library("HSAUR2")
examen <- read_excel("TP1_files/Notes.xlsx")
examen
boxplot(examen$Note, horizontal = TRUE)
library(lattice)
data(Titanic)
Titanic
titanic.bar<-barchart(Class~Freq|Sex + Age, data=as.data.frame(Titanic),
groups=Survived, stack=TRUE, layout=c(4,1),
auto.key=list(title="Survived", columns=2))
print(titanic.bar)
data("plasma")
plasma
cor(plasma["fibrinogen"], plasma["globulin"])
plasma.glm<-glm(ESR~fibrinogen+globulin, data=plasma, family=binomial)
prob<-predict(plasma.glm, type="response")
par(pty="s")
plot(globulin~fibrinogen, data=plasma, xlim=c(2,6), ylim=c(25,55), pch=20,
xlab="fibrinogène", ylab="globuline", main="")
symbols(plasma$fibrinogen, plasma$globulin, circles=prob, add=TRUE, fg="red",
bg="orange")
anscombe.1<-data.frame(x1=anscombe$x1, x4=anscombe$x4, y1=anscombe$y1,
y2=anscombe$y2, y3=anscombe$y3, y4=anscombe$y4)
#install.packages("corrplot")
library("corrplot")
corrplot.mixed(cor(anscombe.1)
#install.packages("corrplot")
library("corrplot")
corMatrix <- cor(anscombe.1)
corrplot.mixed(corMatrix)
correlation_matrix <- correlate(anscombe.1)
correlation_matrix <- correlate(anscombe.1)
network_plot(corMatrix)
install.packages("corrr")
library(corrr)
correlation_matrix <- correlate(anscombe.1)
network_plot(correlation_matrix)
#install.packages("corrr")
library(corrr)
correlation_matrix <- correlate(anscombe.1)
network_plot(correlation_matrix)
install.packages("GGally")
library(GGally)
library(ggplot2)
#install.packages("GGally")
library(GGally)
library(ggplot2)
ggpairs(anscombe.1)
ggpairs(anscombe.1,
upper = list(continuous = "cor", params = list(method = "pearson")),
lower = list(continuous = "points"),
diag = list(continuous = "densityDiag"),
axisLabels = "none")
ggpairs(anscombe.1,
upper = list(continuous = wrap("cor", method = "pearson")),
lower = list(continuous = "points"),
diag = list(continuous = "densityDiag"),
axisLabels = "none")
#install.packages("readxl")
#install.packages("HSAUR2")
library("readxl")
library("HSAUR2")
examen <- read_excel("TP1_files/Notes.xlsx")
examen
boxplot(examen$Note, horizontal = TRUE)
library(lattice)
data(Titanic)
Titanic
titanic.bar<-barchart(Class~Freq|Sex + Age, data=as.data.frame(Titanic),
groups=Survived, stack=TRUE, layout=c(4,1),
auto.key=list(title="Survived", columns=2))
print(titanic.bar)
data("plasma")
plasma
cor(plasma["fibrinogen"], plasma["globulin"])
plasma.glm<-glm(ESR~fibrinogen+globulin, data=plasma, family=binomial)
prob<-predict(plasma.glm, type="response")
par(pty="s")
plot(globulin~fibrinogen, data=plasma, xlim=c(2,6), ylim=c(25,55), pch=20,
xlab="fibrinogène", ylab="globuline", main="")
symbols(plasma$fibrinogen, plasma$globulin, circles=prob, add=TRUE, fg="red",
bg="orange")
anscombe.1<-data.frame(x1=anscombe$x1, x4=anscombe$x4, y1=anscombe$y1,
y2=anscombe$y2, y3=anscombe$y3, y4=anscombe$y4)
#install.packages("corrplot")
library("corrplot")
corMatrix <- cor(anscombe.1)
corrplot.mixed(corMatrix)
#install.packages("corrr")
library(corrr)
correlation_matrix <- correlate(anscombe.1)
network_plot(correlation_matrix)
#install.packages("GGally")
library(GGally)
library(ggplot2)
ggpairs(anscombe.1)
ggpairs(anscombe.1,
upper = list(continuous = wrap("cor", method = "pearson")),
lower = list(continuous = "points"),
diag = list(continuous = "densityDiag"),
axisLabels = "none")
ggpairs(anscombe.1, upper = list(continuous = "points"), lower = list(continuous = "cor", params = list(method = "pearson")))
ggpairs(anscombe.1, upper = list(continuous = "points"), lower = wrap(continuous = "cor", params = wrap(method = "pearson")))
ggpairs(anscombe.1, upper = list(continuous = "points"), lower = list(continuous = "cor", params = list(method = "pearson")))
ggpairs(anscombe.1,
upper = list(continuous = "points"),
lower = wrap(continuous = "cor", method = "pearson"))
ggpairs(anscombe.1,
upper = list(continuous = "points"),
lower = list(continuous = "cor", params = list(method = "pearson")))
ggpairs(anscombe.1, columns = c("x1", "y1"))
ggpairs(anscombe.1, columns = c("x1", "y1"))
ggpairs(anscombe.1, columns = c("x1", "y2"))
ggpairs(anscombe.1, columns = c("x1", "y3"))
ggpairs(anscombe.1, columns = c("x4", "y4"))
install.packages("skim")
library("corrplot")
penguins
#install.packages("skim")
library("corrplot")
install.packages("palmerpenguins")
library("palmerpenguins")
penguins
skim(penguins)
#install.packages("skim")
library("skim")
install.packages("skim")
library("skim")
install.packages("skimr")
library("skimr")
#install.packages("palmerpenguins")
library("palmerpenguins")
skim(penguins)
table(penguins$species)
ggplot(data = penguins, aes(x = flipper_length_mm, y = bill_length_mm)) +
geom_point(aes(color = species, shape = species), size = 3, alpha = 0.8) +
scale_color_manual(values = c("darkorange","purple","cyan4")) +
labs(title = "Taille des manchots, Palmer Station LTER",
subtitle = "Longueur des nageoires et longueur du bec chez les manchots Adelie, Chinstrap et de Gentoo",
x = "Longueur des nageoire (mm)",
y = "Longueur du bec (mm)",
color = "Espèce de manchots",
shape = "Espèce de manchots") +
theme_bw()
correlation <- cor(penguins$bill_length_mm, penguins$flipper_length_mm)
print(correlation)
correlation <- cor(penguins$bill_length_mm, penguins$flipper_length_mm)
print(correlation)
cor(penguins$bill_length_mm, penguins$flipper_length_mm)
cor(penguins$flipper_length_mm, penguins$bill_length_mm)
correlation <- cor(penguins$bill_length_mm, penguins$flipper_length_mm, use = "complete.obs")
cor(penguins$bill_length_mm, penguins$flipper_length_mm, use = "complete.obs")
# Créer un nuage de points pour la longueur du bec par rapport à la masse corporelle avec distinction des îles
ggplot(penguins, aes(x = bill_length_mm, y = body_mass_g, color = island)) +
geom_point() +
labs(x = "Longueur du bec (mm)", y = "Masse corporelle (g)") +
ggtitle("Nuage de points : Longueur du bec vs Masse corporelle") +
scale_color_brewer(palette = "Set1") # Utilisation d'une palette de couleurs pour chaque île
ggplot(data = penguins, aes(x = flipper_length_mm, y = bill_length_mm)) +
geom_point(aes(color = species, shape = island), size = 3, alpha = 0.8) +
scale_color_manual(values = c("darkorange","purple","cyan4")) +
labs(title = "Taille des manchots, Palmer Station LTER",
subtitle = "Longueur des nageoires et longueur du bec chez les manchots Adelie, Chinstrap et de Gentoo",
x = "Longueur des nageoire (mm)",
y = "Longueur du bec (mm)",
color = "Espèce de manchots",
shape = "Espèce de manchots") +
theme_bw()
ggplot(penguins, aes(x = island, y = species, color = species)) +
geom_jitter(size = 3) +
scale_color_manual(values = c("darkorange","purple","cyan4")) +
labs(x = "Iles",
y = "Espèce de manchots",
color = "Espèce de manchots")
# Tracer le nuage de points de la longueur du bec versus la longueur des nageoires selon l'espèce et le sexe des manchots
ggplot(penguins, aes(x = bill_length_mm, y = flipper_length_mm)) +
geom_point() +
labs(x = "Longueur du bec (mm)", y = "Longueur des nageoires (mm)") +
facet_wrap(~ species + sex, scales = "free") +
ggtitle("Nuage de points : Longueur du bec vs Longueur des nageoires selon l'espèce et le sexe")
# Tracer le nuage de points de la longueur du bec versus la longueur des nageoires selon l'espèce et le sexe des manchots
ggplot(penguins, aes(x = bill_length_mm, y = flipper_length_mm, color = sex)) +
geom_point() +
labs(x = "Longueur du bec (mm)", y = "Longueur des nageoires (mm)") +
facet_wrap(~ species, scales = "free") +
ggtitle("Nuage de points : Longueur du bec vs Longueur des nageoires selon l'espèce et le sexe")
install.packages("readr")
library("readr")
isc_grant <- read_csv("files/isc_grants.csv")
skim(isc_grant)
#install.packages("readr")
library("readr")
install.packages("treemapify")
library("treemapify")
install.packages("camcorder")
library("camcorder")
gg_record(dir="ISCgrant", device="png", width=9, height=8, units="in", dpi=320)
gg_record(dir="ISCgrant", device="png", width=9, height=8, units="in", dpi=320)
pal<-c("#002870","#005A87","#078788","#A5A63C","#DE9704","#C45D27","#AD3518","#990C00")
skim(isc_grant)
ggplot(isc_grant, aes(area=montant, fill=factor(status), subgroup=year)) +
geom_treemap(radius=unit(0.2, "line"), color="white", size=2) +
geom_treemap_text(aes(label=paste0(title, "\n", proposed_by, "\n\n", scales::dollar(funded))), reflow=TRUE, grow=TRUE, color="white") +
geom_treemap_subgroup_text(aes(label=year), color="white", grow=TRUE, alpha=0.25) +
scale_fill_manual(values=pal) +
labs(
title="Bourses accordées selon les années",
caption="Source: Comité de pilotage du consortium R",
fill="year") +
theme_void()+
theme(
legend.position="none",
plot.background=element_rect(fill="grey99", color=NA),
plot.title=element_text(size=30, face="bold", color="#0D2765", margin=margin(0, 0, 5, 0)),
plot.caption=element_text(color="#0D2765"),
plot.margin=margin(10, 10, 10, 10)
)
ggplot(isc_grant, aes(area=funded, fill=factor(year), subgroup=year)) +
geom_treemap(radius=unit(0.2, "line"), color="white", size=2) +
geom_treemap_text(aes(label=paste0(title, "\n", proposed_by, "\n\n", scales::dollar(funded))), reflow=TRUE, grow=TRUE, color="white") +
geom_treemap_subgroup_text(aes(label=year), color="white", grow=TRUE, alpha=0.25) +
scale_fill_manual(values=pal) +
labs(
title="Bourses accordées selon les années",
caption="Source: Comité de pilotage du consortium R",
fill="year") +
theme_void()+
theme(
legend.position="none",
plot.background=element_rect(fill="grey99", color=NA),
plot.title=element_text(size=30, face="bold", color="#0D2765", margin=margin(0, 0, 5, 0)),
plot.caption=element_text(color="#0D2765"),
plot.margin=margin(10, 10, 10, 10)
)
