---
title: "VID"
subtitle: "German Credit Data"
author:
  - name: Rémi Ançay & Lucas Charbonnier
highlight-style: github
format:
  html:
    theme: cosmo
    monobackgroundcolor: rgb(255,250,240)
    toc: true
    toc-location: left
    #reference-location: margin
    reference-location: document
    code-line-numbers: true
date: 'last-modified'
date-format: '[This version:] MMMM D, YYYY'
number-sections: false
editor: 
  visual
execute:
  echo: true
  message: true
  warning: false
  output: true
---

## Introduction

todo

### Gestion des librairies
```{r}
#| output: false

download = FALSE

#r = getOption("repos")
#r["CRAN"] = "http://cran.us.r-project.org"
#options(repos = r)

if(download) {
  install.packages("ggResidpanel")
  install.packages("tidyverse")
  install.packages("ggrepel")
  install.packages("GGally")
  install.packages("rgl")
  install.packages("scatterplot3d")
  install.packages("readxl")
  install.packages("psych") 
  install.packages("leaps")
  install.packages("pROC")
}

library("ggResidpanel")
library("tidyverse")
library("ggrepel")
library("GGally")
library("rgl")
library("scatterplot3d")
library("readxl")
library("psych")
library("leaps")
library("pROC")

```

## Chargement des données
```{r}
# Chargement des données
GermanCredit <- read.csv("data/GermanCredit.csv", sep = ";")
```

Après analyse, il existe en fait des valeurs "NA", nous avons choisis de les supprimer, car elle semble aléatoire

Il existe aussi plusieurs erreurs dans les données que nous avons rectifier:
- dans DURATION il existait une valeur de -6 (mise à 6)
- dans MALE_SINGLE il existait une valeur de 2 (mise à 1)
- dans GUARANTOR il existait une valeur de -1 (mise à 1)
- PRESENT_RESIDENT est noté de 0 à 3 mais dans les valeurs elles sont de 1 à 4
- dans AGE il existe une valeur à 151 (mise à 51)


```{r}

GermanCredit = na.omit(GermanCredit)


describe(GermanCredit)
```

## Linear regression

```{r}
#LM avec tout
GermanCredit.lm = lm(RESPONSE~., data=GermanCredit)
coef(GermanCredit.lm)
summary(GermanCredit.lm)
```


```{r}
#Trouver les meilleurs var
choix <- regsubsets(RESPONSE~., data=GermanCredit, nbest=1, nvmax=11)

plot(choix, scale="adjr2", col="midnightblue")
plot(choix, scale="bic", col="midnightblue")
plot(choix, scale="Cp", col="midnightblue")


leaps <- regsubsets(RESPONSE~., data=GermanCredit, nbest=10)
summary(leaps)
```

```{r}
#LM avec les meilleurs
GermanCredit.lmReduced = lm(RESPONSE~CHK_ACCT+DURATION+HISTORY, data=GermanCredit)
coef(GermanCredit.lmReduced)
```

```{r}
summary(GermanCredit.lmReduced)
```

## Logistic regression

```{r}
# Séparation des variables catégorielles
GermanCredit$CHK_ACCT = factor(GermanCredit$CHK_ACCT)
GermanCredit$HISTORY = factor(GermanCredit$HISTORY)
GermanCredit$SAV_ACCT = factor(GermanCredit$SAV_ACCT)
GermanCredit$EMPLOYMENT = factor(GermanCredit$EMPLOYMENT)
GermanCredit$PRESENT_RESIDENT = factor(GermanCredit$PRESENT_RESIDENT)
GermanCredit$JOB = factor(GermanCredit$JOB)
```

```{r}

GermanCredit.glm = glm(RESPONSE~., data=GermanCredit, family = binomial)
#coef(GermanCredit.glm)
summary(GermanCredit.glm)
```

```{r}

GermanCredit.glmReduced = glm(RESPONSE~CHK_ACCT+DURATION+HISTORY+NEW_CAR+EDUCATION+AMOUNT+SAV_ACCT+INSTALL_RATE+MALE_SINGLE+GUARANTOR+PRESENT_RESIDENT+OTHER_INSTALL+TELEPHONE+FOREIGN, data=GermanCredit, family = binomial)
summary(GermanCredit.glmReduced)
```

## Plots


### Residual
```{r}
# Calculate residuals
residuals <- residuals(GermanCredit.glm, type = "deviance")

# Create residuals plot
ggplot(data.frame(residuals), aes(x = residuals)) +
  geom_histogram(binwidth = 0.5, fill = "blue", color = "black", alpha = 0.7) +
  labs(title = "Residuals Plot", x = "Deviance Residuals", y = "Frequency") +
  theme_minimal()
```

### Coefficients and confidence intervals
```{r}
# Extract coefficients and confidence intervals
coef_df <- as.data.frame(summary(GermanCredit.glm)$coefficients)
coef_df$variable <- rownames(coef_df)
colnames(coef_df) <- c("Estimate", "Std.Error", "z.value", "p.value", "variable")

# Create the plot
ggplot(coef_df, aes(x = reorder(variable, Estimate), y = Estimate)) +
  geom_point() +
  geom_errorbar(aes(ymin = Estimate - 1.96 * Std.Error, ymax = Estimate + 1.96 * Std.Error), width = 0.2) +
  coord_flip() +
  labs(title = "Coefficient Plot", x = "Variables", y = "Estimates") +
  theme_minimal()
```

### ROC Curve
```{r}
# Predict probabilities
prob <- predict(GermanCredit.glm, type = "response")

# Create ROC curve
roc_curve <- roc(GermanCredit$RESPONSE, prob)

# Plot ROC curve
ggroc(roc_curve) +
  labs(title = "ROC Curve", x = "False Positive Rate", y = "True Positive Rate") +
  theme_minimal()
```

```{r}
# Predict probabilities
prob <- predict(GermanCredit.glmReduced, type = "response")

# Create ROC curve
roc_curve <- roc(GermanCredit$RESPONSE, prob)

# Plot ROC curve
ggroc(roc_curve) +
  labs(title = "ROC Curve", x = "False Positive Rate", y = "True Positive Rate") +
  theme_minimal()
```


### Age 
```{r}
# Add a new column for predicted probabilities
GermanCredit$predicted_prob <- predict(GermanCredit.glm, type = "response")

# Create the plot
ggplot(GermanCredit, aes(x = AGE, y = predicted_prob)) +
  geom_point(alpha = 0.5) +  # Scatter plot of predicted probabilities
  geom_smooth(method = "loess", color = "blue") +  # Smoothed line
  labs(title = "Predicted Probabilities vs Age",
       x = "Age",
       y = "Predicted Probability") +
  theme_minimal()
```

### CHK_ACCT
```{r}
# Add a new column for predicted probabilities
GermanCredit$predicted_prob <- predict(GermanCredit.glm, type = "response")

# Create the plot
ggplot(GermanCredit, aes(x = CHK_ACCT, y = predicted_prob)) +
  geom_point(alpha = 0.5) +  # Scatter plot of predicted probabilities
  geom_smooth(method = "loess", color = "blue") +  # Smoothed line
  labs(title = "Predicted Probabilities vs CHK_ACCT",
       x = "CHK_ACCT",
       y = "Predicted Probability") +
  theme_minimal()
```

### Boxplots
```{r}
# Create a boxplot for each level of CHK_ACCT
ggplot(GermanCredit.glm, aes(x = as.factor(CHK_ACCT), y = RESPONSE)) +
  geom_boxplot() +
  labs(title = "Boxplot of RESPONSE by CHK_ACCT Levels",
       x = "CHK_ACCT",
       y = "RESPONSE") +
  theme_minimal()
```
```{r}
# Boxplot for DURATION
ggplot(GermanCredit.glm, aes(x = as.factor(RESPONSE), y = DURATION)) +
  geom_boxplot() +
  labs(title = "Boxplot of DURATION by RESPONSE",
       x = "RESPONSE",
       y = "DURATION") +
  theme_minimal()

# Boxplot for MALE_SINGLE
ggplot(GermanCredit.glm, aes(x = as.factor(RESPONSE), y = MALE_SINGLE)) +
  geom_boxplot() +
  labs(title = "Boxplot of MALE_SINGLE by RESPONSE",
       x = "RESPONSE",
       y = "MALE_SINGLE") +
  theme_minimal()

# Boxplot for AMOUNT
ggplot(GermanCredit.glm, aes(x = as.factor(RESPONSE), y = AMOUNT)) +
  geom_boxplot() +
  labs(title = "Boxplot of AMOUNT by RESPONSE",
       x = "RESPONSE",
       y = "AMOUNT") +
  theme_minimal()

# Boxplot for AGE
ggplot(GermanCredit.glm, aes(x = as.factor(RESPONSE), y = AGE)) +
  geom_boxplot() +
  labs(title = "Boxplot of AGE by RESPONSE",
       x = "RESPONSE",
       y = "AGE") +
  theme_minimal()
```

### Histogram
```{r}
# Create histograms for each level of CHK_ACCT
ggplot(GermanCredit.glm, aes(x = as.factor(RESPONSE))) +
  geom_histogram(stat = "count", fill = "steelblue", color = "black") +
  facet_wrap(~ CHK_ACCT) +
  labs(title = "Histogram of RESPONSE by CHK_ACCT Levels",
       x = "RESPONSE",
       y = "Count") +
  theme_minimal()
```

```{r}
# Create a stacked bar plot of the proportion of RESPONSE for each CHK_ACCT level
ggplot(GermanCredit.glm, aes(x = as.factor(CHK_ACCT), fill = as.factor(RESPONSE))) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(title = "Proportion of RESPONSE by CHK_ACCT Levels",
       x = "CHK_ACCT",
       y = "Proportion",
       fill = "RESPONSE") +
  theme_minimal()
```